'use strict';class node{constructor(a){this.value=a,this.leftChild=void 0,this.rightChild=void 0}}module.exports=node;
'use strict';const Node=require("./node");class BinarySearchTree extends Node{constructor(a){super(a)}insertNode(a){a<=this.value&&this.leftChild?this.leftChild.insertNode(a):a<=this.value?this.leftChild=new BinarySearchTree(a):a>this.value&&this.rightChild?this.rightChild.insertNode(a):this.rightChild=new BinarySearchTree(a)}removeNode(a,b){if(a<this.value&&this.leftChild)return this.leftChild.removeNode(a,this);return!(a<this.value)&&(a>this.value&&this.rightChild?this.rightChild.removeNode(a,this):!(a>this.value)&&void(null==this.leftChild&&null==this.rightChild&&this==b.leftChild?(b.leftChild=void 0,this.clearNod()):null==this.leftChild&&null==this.rightChild&&this==b.rightChild?(b.rightChild=void 0,this.clearNod()):this.leftChild&&null==this.rightChild&&this==b.leftChild?(b.leftChild=this.leftChild,this.clearNod()):this.leftChild&&null==this.rightChild&&this==b.rightChild?(b.rightChild=this.leftChild,this.clearNod()):this.rightChild&&null==this.leftChild&&this==b.leftChild?(b.leftChild=this.rightChild,this.clearNod()):this.rightChild&&null==this.leftChild&&this==b.rightChild?(b.rightChild=this.rightChild,this.clearNod()):(this.value=this.right_child.findMinimumValue(),this.right_child.removeNode(this.value,this))))}findNode(a){return a<this.value&&this.leftChild?this.leftChild.findNode(a):a>this.value&&this.rightChild?this.rightChild.findNode(a):a==this.value}clearNod(){delete this}findMinimumValue(){return this.leftChild?this.leftChild.findMinimumValue():void this.value}}module.exports=BinarySearchTree;